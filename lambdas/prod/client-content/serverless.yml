custom:
  file: ${file(../config-common.yaml)}
  config:
    linting: false
    sourcemaps: true
    excludeFiles: ./_para/*

# -------------------------------------------------------

    app: content
    service: client
    memorySize: 256
    timeout: 5

functions:
  handleGetProfileScreenContentRequest:
    handler: handler.handleGetProfileScreenContentRequest
    events:
      - http:
          path: ${self:custom.file.endpoints.${self:app}.${self:service}.profile}
          method: get
          cors: true
  handleGetLibLabScreenContentRequest:
    handler: handler.handleGetLibLabScreenContentRequest
    events:
      - http:
          path: ${self:custom.file.endpoints.${self:app}.${self:service}.liblab}
          method: get
          cors: true
  handleGetArticleScreenContentRequest:
    handler: handler.handleGetArticleScreenContentRequest
    events:
      - http:
          path: ${self:custom.file.endpoints.${self:app}.${self:service}.liblab}/{slug}
          method: get
          cors: true
          request:
            parameters:
              paths:
                slug: true
  handleGetContactScreenContentRequest:
    handler: handler.handleGetContactScreenContentRequest
    events:
      - http:
          path: ${self:custom.file.endpoints.${self:app}.${self:service}.contact}
          method: get
          cors: true
  handleGetMetaScreenContentRequest:
    handler: handler.handleGetMetaScreenContentRequest
    events:
      - http:
          path: ${self:custom.file.endpoints.${self:app}.${self:service}.meta}
          method: get
          cors: true
  handleGet404ScreenContentRequest:
    handler: handler.handleGet404ScreenContentRequest
    events:
      - http:
          path: ${self:custom.file.endpoints.${self:app}.${self:service}.fourohfour}
          method: get
          cors: true

# -------------------------------------------------------

projectDir: ../
frameworkVersion: ${self:custom.file.custom.config.frameworkVersion}
org: ${self:custom.file.custom.config.org}
app: ${self:custom.config.app}
service: ${self:custom.config.service}
provider:
  name: aws
  runtime: ${self:custom.file.provider.runtime}
  stage: ${self:custom.file.custom.config.stage}
  lambdaHashingVersion: '20201221'
  region: us-east-1
  profile: ${self:custom.file.provider.profile}
  memorySize: ${self:custom.config.memorySize}
  timeout: ${self:custom.config.timeout}
  deploymentBucket:
    name: jbkr-${self:provider.stage}-lambdas
  environment:
    NODE_PATH: "./:/opt/node_modules"
    stage: ${self:provider.stage}
    mongoDbHost: ${self:custom.file.mongoDbHost}
    mongoDbPass: ${self:custom.file.mongoDbPass}
    mongoDbUser: ${self:custom.file.mongoDbUser}
    mongoDbDbName: ${self:custom.file.mongoDbDbName}
    twitterConsumerKey: ${self.custom.file.twitterConsumerKey}
    twitterConsumerSecret: ${self.custom.file.twitterConsumerSecret}
    twitterAccessToken: ${self.custom.file.twitterAccessToken}
    twitterTokenSecret: ${self.custom.file.twitterTokenSecret}
    twitterBearerToken: ${self:custom.file.twitterBearerToken}
    simpleAuthKey: ${self:custom.file.simpleAuthKey}
package:
  individually: true
plugins:
  - serverless-bundle
